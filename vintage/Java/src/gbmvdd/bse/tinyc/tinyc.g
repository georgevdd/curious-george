/*
 * Make sure to run antlr.Tool on the lexer.g file first!
 */

header
{
package gbmvdd.bse.tinyc;
}

options
{
	mangleLiteralPrefix = "TK_";
	language = "BSEJava";
}

{
//import java.io.*;
import gbmvdd.util.*;
import gbmvdd.bse.*;
}

class TinyCParser extends Parser;
options
{
	importVocab=TinyC; // use vocab generated by lexer
	buildAST=true;
	defaultErrorHandler=true;
//	codeGenDebug=true;
}

/*{
	protected ParseTreeTokenBuffer tokenBuffer;
	public TinyCParser( ParseTreeTokenBuffer pttb )
	{
		super( (TokenBuffer)null, 1 );
		tokenBuffer = pttb;
	}
	public void consume()
	{
		tokenBuffer.consume();
	}
	public int LA( int i ) throws TokenStreamException
	{
		return tokenBuffer.LA( i );
	}
	public Token LT( int i ) throws TokenStreamException
	{
		return tokenBuffer.LT( i );
	}
    public int mark()
    {
		return tokenBuffer.mark();
    }
    public void rewind( int pos )
    {
		tokenBuffer.rewind(pos);
    }
}*/

program
	:	( declaration )* EOF
	;

declaration
	:	(variable) => variable
	|	function
	;

declarator
	:	id:ID
	|	STAR id2:ID
	;

variable
	:	type declarator SEMI
	;

function
	:	type id:ID LPAREN
		(formalParameter (COMMA formalParameter)*)?
		RPAREN
		block
	;

formalParameter
	:	type declarator
	;

type:
	(
		TK_int
	|	TK_char
	|	id:ID
	)
	;

block
	:	LCURLY ( statement )* RCURLY
	;

statement
	:	(declaration) => declaration
	|	expr SEMI
	|	TK_if LPAREN expr RPAREN statement
		( TK_else statement )?
	|	TK_while LPAREN expr RPAREN statement
	|	block
	;

expr:	assignExpr
	;

assignExpr
	:	aexpr (ASSIGN assignExpr)?
	;

aexpr
	:	mexpr (PLUS mexpr)*
	;

mexpr
	:	atom (STAR atom)*
	;

atom:	ID
	|	INT
	|	CHAR_LITERAL
	|	STRING_LITERAL
	;

// GBMvdD 12/01/2002 added to test panic recovery capability
/*panicRecovery
	:	SEMI
	|	RCURLY
	|	RPAREN
	;
*/

// GBMvdD 14/01/2002 added this rule to allow runtime
// determination of the set of tokens that the parser
// should not see.
ignoredTokens
	: SL_COMMENT
	| ML_COMMENT
	| WS
	;
